	[start] sockets!Program.<Main>(class System.String[])
		[start] sockets!Program.<Main>$(class System.String[])
			[start] sockets!Program+<<Main>$>d__0.MoveNext()
				[start] system.net.sockets!System.Net.Sockets.TcpClient..ctor()
					[start] system.net.sockets!System.Net.Sockets.TcpClient..ctor(value class System.Net.Sockets.AddressFamily)
						[start] system.net.sockets!System.Net.NetEventSource..cctor()
							[start] system.net.sockets!System.Net.NetEventSource..ctor()
							[ end ] system.net.sockets!System.Net.NetEventSource..ctor()
						[ end ] system.net.sockets!System.Net.NetEventSource..cctor()
						[start] system.net.sockets!System.Net.NetEventSource..cctor()
							[start] system.net.sockets!System.Net.NetEventSource..ctor()
							[ end ] system.net.sockets!System.Net.NetEventSource..ctor()
						[ end ] system.net.sockets!System.Net.NetEventSource..cctor()
						[start] system.net.sockets!System.Net.Sockets.TcpClient.InitializeClientSocket()
							[start] system.net.sockets!System.Net.Sockets.Socket..ctor(value class System.Net.Sockets.SocketType,value class System.Net.Sockets.ProtocolType)
								[start] system.net.sockets!System.Net.Sockets.Socket.get_OSSupportsIPv6()
									[start] system.net.sockets!System.Net.SocketProtocolSupportPal.get_OSSupportsIPv6()
										[start] system.net.sockets!System.Net.SocketProtocolSupportPal..cctor()
											[start] system.net.sockets!System.Net.SocketProtocolSupportPal.IsSupported(value class System.Net.Sockets.AddressFamily)
											[ end ] system.net.sockets!System.Net.SocketProtocolSupportPal.IsSupported(value class System.Net.Sockets.AddressFamily)
										[ end ] system.net.sockets!System.Net.SocketProtocolSupportPal..cctor()
									[ end ] system.net.sockets!System.Net.SocketProtocolSupportPal.get_OSSupportsIPv6()
								[ end ] system.net.sockets!System.Net.Sockets.Socket.get_OSSupportsIPv6()
								[start] system.net.sockets!System.Net.Sockets.Socket..ctor(value class System.Net.Sockets.AddressFamily,value class System.Net.Sockets.SocketType,value class System.Net.Sockets.ProtocolType)
									[start] system.net.sockets!System.Net.Sockets.SocketPal.CreateSocket(value class System.Net.Sockets.AddressFamily,value class System.Net.Sockets.SocketType,value class System.Net.Sockets.ProtocolType,class System.Net.Sockets.SafeSocketHandle&)
									[ end ] system.net.sockets!System.Net.Sockets.SocketPal.CreateSocket(value class System.Net.Sockets.AddressFamily,value class System.Net.Sockets.SocketType,value class System.Net.Sockets.ProtocolType,class System.Net.Sockets.SafeSocketHandle&)
								[ end ] system.net.sockets!System.Net.Sockets.Socket..ctor(value class System.Net.Sockets.AddressFamily,value class System.Net.Sockets.SocketType,value class System.Net.Sockets.ProtocolType)
								[start] system.net.sockets!System.Net.Sockets.Socket.set_DualMode(bool)
									[start] system.net.sockets!System.Net.Sockets.Socket.SetSocketOption(value class System.Net.Sockets.SocketOptionLevel,value class System.Net.Sockets.SocketOptionName,int32)
										[start] system.net.sockets!System.Net.Sockets.Socket.ThrowIfDisposed()
										[ end ] system.net.sockets!System.Net.Sockets.Socket.ThrowIfDisposed()
										[start] system.net.sockets!System.Net.Sockets.Socket.SetSocketOption(value class System.Net.Sockets.SocketOptionLevel,value class System.Net.Sockets.SocketOptionName,int32,bool)
											[start] system.net.sockets!System.Net.Sockets.SocketPal.SetSockOpt(class System.Net.Sockets.SafeSocketHandle,value class System.Net.Sockets.SocketOptionLevel,value class System.Net.Sockets.SocketOptionName,int32)
												[start] system.net.sockets!System.Net.Sockets.SocketPal.GetErrorAndTrackSetting(class System.Net.Sockets.SafeSocketHandle,value class System.Net.Sockets.SocketOptionLevel,value class System.Net.Sockets.SocketOptionName,value class Error)
												[ end ] system.net.sockets!System.Net.Sockets.SocketPal.GetErrorAndTrackSetting(class System.Net.Sockets.SafeSocketHandle,value class System.Net.Sockets.SocketOptionLevel,value class System.Net.Sockets.SocketOptionName,value class Error)
											[ end ] system.net.sockets!System.Net.Sockets.SocketPal.SetSockOpt(class System.Net.Sockets.SafeSocketHandle,value class System.Net.Sockets.SocketOptionLevel,value class System.Net.Sockets.SocketOptionName,int32)
										[ end ] system.net.sockets!System.Net.Sockets.Socket.SetSocketOption(value class System.Net.Sockets.SocketOptionLevel,value class System.Net.Sockets.SocketOptionName,int32,bool)
									[ end ] system.net.sockets!System.Net.Sockets.Socket.SetSocketOption(value class System.Net.Sockets.SocketOptionLevel,value class System.Net.Sockets.SocketOptionName,int32)
								[ end ] system.net.sockets!System.Net.Sockets.Socket.set_DualMode(bool)
							[ end ] system.net.sockets!System.Net.Sockets.Socket..ctor(value class System.Net.Sockets.SocketType,value class System.Net.Sockets.ProtocolType)
						[ end ] system.net.sockets!System.Net.Sockets.TcpClient.InitializeClientSocket()
					[ end ] system.net.sockets!System.Net.Sockets.TcpClient..ctor(value class System.Net.Sockets.AddressFamily)
				[ end ] system.net.sockets!System.Net.Sockets.TcpClient..ctor()
				[start] system.net.sockets!System.Net.Sockets.TcpClient.BeginConnect(class System.String,int32,class System.AsyncCallback,class System.Object)
					[start] system.net.sockets!System.Net.Sockets.TcpClient.get_Client()
					[ end ] system.net.sockets!System.Net.Sockets.TcpClient.get_Client()
					[start] system.net.sockets!System.Net.Sockets.Socket.BeginConnect(class System.String,int32,class System.AsyncCallback,class System.Object)
						[start] system.net.sockets!System.Net.Sockets.Socket.ConnectAsync(class System.String,int32)
							[start] system.net.sockets!System.Net.Sockets.Socket.ConnectAsync(class System.String,int32,value class System.Threading.CancellationToken)
								[start] system.net.sockets!System.Net.Sockets.Socket.ConnectAsync(class System.Net.EndPoint,value class System.Threading.CancellationToken)
									[start] system.net.sockets!System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs..ctor(class System.Net.Sockets.Socket,bool)
										[start] system.net.sockets!System.Net.Sockets.SocketAsyncEventArgs..ctor(bool)
										[ end ] system.net.sockets!System.Net.Sockets.SocketAsyncEventArgs..ctor(bool)
									[ end ] system.net.sockets!System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs..ctor(class System.Net.Sockets.Socket,bool)
									[start] system.net.sockets!System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.ConnectAsync(class System.Net.Sockets.Socket)
										[start] system.net.sockets!System.Net.Sockets.Socket.ConnectAsync(class System.Net.Sockets.SocketAsyncEventArgs,bool,bool)
											[start] system.net.sockets!System.Net.Sockets.Socket.ValidateForMultiConnect(bool)
												[start] system.net.sockets!System.Net.Sockets.Socket.ReplaceHandleIfNecessaryAfterFailedConnect()
												[ end ] system.net.sockets!System.Net.Sockets.Socket.ReplaceHandleIfNecessaryAfterFailedConnect()
											[ end ] system.net.sockets!System.Net.Sockets.Socket.ValidateForMultiConnect(bool)
											[start] system.net.sockets!System.Net.Sockets.SocketAsyncEventArgs.StartOperationCommon(class System.Net.Sockets.Socket,value class System.Net.Sockets.SocketAsyncOperation)
												[start] system.net.sockets!System.Net.Sockets.SocketsTelemetry..cctor()
													[start] system.net.sockets!System.Net.Sockets.SocketsTelemetry..ctor()
													[ end ] system.net.sockets!System.Net.Sockets.SocketsTelemetry..ctor()
												[ end ] system.net.sockets!System.Net.Sockets.SocketsTelemetry..cctor()
												[start] system.net.sockets!System.Net.Sockets.SocketsTelemetry..cctor()
													[start] system.net.sockets!System.Net.Sockets.SocketsTelemetry..ctor()
													[ end ] system.net.sockets!System.Net.Sockets.SocketsTelemetry..ctor()
												[ end ] system.net.sockets!System.Net.Sockets.SocketsTelemetry..cctor()
												[start] system.net.sockets!System.Net.Sockets.SocketsTelemetry..cctor()
													[start] system.net.sockets!System.Net.Sockets.SocketsTelemetry..ctor()
													[ end ] system.net.sockets!System.Net.Sockets.SocketsTelemetry..ctor()
												[ end ] system.net.sockets!System.Net.Sockets.SocketsTelemetry..cctor()
											[ end ] system.net.sockets!System.Net.Sockets.SocketAsyncEventArgs.StartOperationCommon(class System.Net.Sockets.Socket,value class System.Net.Sockets.SocketAsyncOperation)
											[start] system.net.sockets!System.Net.Sockets.SocketAsyncEventArgs.DnsConnectAsync(class System.Net.DnsEndPoint,value class System.Net.Sockets.SocketType,value class System.Net.Sockets.ProtocolType)
												[start] system.net.sockets!System.Net.Sockets.SocketAsyncEventArgs.CopyBufferFrom(class System.Net.Sockets.SocketAsyncEventArgs)
													[start] system.net.sockets!System.Net.Sockets.SocketAsyncEventArgs.Complete()
													[ end ] system.net.sockets!System.Net.Sockets.SocketAsyncEventArgs.Complete()
												[ end ] system.net.sockets!System.Net.Sockets.SocketAsyncEventArgs.CopyBufferFrom(class System.Net.Sockets.SocketAsyncEventArgs)
												[start] system.net.sockets!System.Net.Sockets.SocketAsyncEventArgs.<DnsConnectAsync>g__Core|112_0(class MultiConnectSocketAsyncEventArgs,class System.Threading.Tasks.Task`1<class System.Net.IPAddress[]>,int32,value class System.Net.Sockets.SocketType,value class System.Net.Sockets.ProtocolType,value class System.Threading.CancellationToken)
													[start] system.net.sockets!System.Net.Sockets.SocketAsyncEventArgs+<<DnsConnectAsync>g__Core|112_0>d.MoveNext()
													[ end ] system.net.sockets!System.Net.Sockets.SocketAsyncEventArgs+<<DnsConnectAsync>g__Core|112_0>d.MoveNext()
												[ end ] system.net.sockets!System.Net.Sockets.SocketAsyncEventArgs.<DnsConnectAsync>g__Core|112_0(class MultiConnectSocketAsyncEventArgs,class System.Threading.Tasks.Task`1<class System.Net.IPAddress[]>,int32,value class System.Net.Sockets.SocketType,value class System.Net.Sockets.ProtocolType,value class System.Threading.CancellationToken)
											[ end ] system.net.sockets!System.Net.Sockets.SocketAsyncEventArgs.DnsConnectAsync(class System.Net.DnsEndPoint,value class System.Net.Sockets.SocketType,value class System.Net.Sockets.ProtocolType)
										[ end ] system.net.sockets!System.Net.Sockets.Socket.ConnectAsync(class System.Net.Sockets.SocketAsyncEventArgs,bool,bool)
									[ end ] system.net.sockets!System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.ConnectAsync(class System.Net.Sockets.Socket)
									[start] system.net.sockets!System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.GetStatus(int16)
										[start] system.net.sockets!System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs..cctor()
											[start] system.net.sockets!System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs+<>c..cctor()
											[ end ] system.net.sockets!System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs+<>c..cctor()
										[ end ] system.net.sockets!System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs..cctor()
									[ end ] system.net.sockets!System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.GetStatus(int16)
								[ end ] system.net.sockets!System.Net.Sockets.Socket.ConnectAsync(class System.Net.EndPoint,value class System.Threading.CancellationToken)
							[ end ] system.net.sockets!System.Net.Sockets.Socket.ConnectAsync(class System.String,int32,value class System.Threading.CancellationToken)
							[start] system.net.sockets!System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.OnCompleted(class System.Action`1<class System.Object>,class System.Object,int16,value class System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)
							[ end ] system.net.sockets!System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.OnCompleted(class System.Action`1<class System.Object>,class System.Object,int16,value class System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)
						[ end ] system.net.sockets!System.Net.Sockets.Socket.ConnectAsync(class System.String,int32)
						[start] system.net.sockets!System.Threading.Tasks.TaskToApm.Begin(class System.Threading.Tasks.Task,class System.AsyncCallback,class System.Object)
						[ end ] system.net.sockets!System.Threading.Tasks.TaskToApm.Begin(class System.Threading.Tasks.Task,class System.AsyncCallback,class System.Object)
					[ end ] system.net.sockets!System.Net.Sockets.Socket.BeginConnect(class System.String,int32,class System.AsyncCallback,class System.Object)
				[ end ] system.net.sockets!System.Net.Sockets.TcpClient.BeginConnect(class System.String,int32,class System.AsyncCallback,class System.Object)
				[start] system.net.sockets!System.Threading.Tasks.TaskToApm+TaskAsyncResult.get_AsyncWaitHandle()
				[ end ] system.net.sockets!System.Threading.Tasks.TaskToApm+TaskAsyncResult.get_AsyncWaitHandle()
				[start] system.net.sockets!System.Net.Sockets.NetworkStream.Write(value class System.ReadOnlySpan`1<unsigned int8>)
					[start] system.net.sockets!System.Net.Sockets.Socket.Send(value class System.ReadOnlySpan`1<unsigned int8>,value class System.Net.Sockets.SocketFlags)
						[start] system.net.sockets!System.Net.Sockets.Socket.Send(value class System.ReadOnlySpan`1<unsigned int8>,value class System.Net.Sockets.SocketFlags,value class System.Net.Sockets.SocketError&)
							[start] system.net.sockets!System.Net.Sockets.SocketPal.Send(class System.Net.Sockets.SafeSocketHandle,value class System.ReadOnlySpan`1<unsigned int8>,value class System.Net.Sockets.SocketFlags,int32&)
								[start] system.net.sockets!System.Net.Sockets.SocketAsyncContext.Send(value class System.ReadOnlySpan`1<unsigned int8>,value class System.Net.Sockets.SocketFlags,int32,int32&)
									[start] system.net.sockets!System.Net.Sockets.SocketAsyncContext.SendTo(value class System.ReadOnlySpan`1<unsigned int8>,value class System.Net.Sockets.SocketFlags,unsigned int8[],int32,int32,int32&)
										[start] system.net.sockets!System.Net.Sockets.SocketPal.TryCompleteSendTo(class System.Net.Sockets.SafeSocketHandle,value class System.ReadOnlySpan`1<unsigned int8>,class System.Collections.Generic.IList`1<value class System.ArraySegment`1<unsigned int8>>,int32&,int32&,int32&,value class System.Net.Sockets.SocketFlags,unsigned int8[],int32,int32&,value class System.Net.Sockets.SocketError&)
										[ end ] system.net.sockets!System.Net.Sockets.SocketPal.TryCompleteSendTo(class System.Net.Sockets.SafeSocketHandle,value class System.ReadOnlySpan`1<unsigned int8>,class System.Collections.Generic.IList`1<value class System.ArraySegment`1<unsigned int8>>,int32&,int32&,int32&,value class System.Net.Sockets.SocketFlags,unsigned int8[],int32,int32&,value class System.Net.Sockets.SocketError&)
									[ end ] system.net.sockets!System.Net.Sockets.SocketAsyncContext.SendTo(value class System.ReadOnlySpan`1<unsigned int8>,value class System.Net.Sockets.SocketFlags,unsigned int8[],int32,int32,int32&)
								[ end ] system.net.sockets!System.Net.Sockets.SocketAsyncContext.Send(value class System.ReadOnlySpan`1<unsigned int8>,value class System.Net.Sockets.SocketFlags,int32,int32&)
							[ end ] system.net.sockets!System.Net.Sockets.SocketPal.Send(class System.Net.Sockets.SafeSocketHandle,value class System.ReadOnlySpan`1<unsigned int8>,value class System.Net.Sockets.SocketFlags,int32&)
						[ end ] system.net.sockets!System.Net.Sockets.Socket.Send(value class System.ReadOnlySpan`1<unsigned int8>,value class System.Net.Sockets.SocketFlags,value class System.Net.Sockets.SocketError&)
					[ end ] system.net.sockets!System.Net.Sockets.Socket.Send(value class System.ReadOnlySpan`1<unsigned int8>,value class System.Net.Sockets.SocketFlags)
				[ end ] system.net.sockets!System.Net.Sockets.NetworkStream.Write(value class System.ReadOnlySpan`1<unsigned int8>)
			[ end ] sockets!Program+<<Main>$>d__0.MoveNext()
		[ end ] sockets!Program.<Main>$(class System.String[])
	[ end ] sockets!Program.<Main>(class System.String[])
